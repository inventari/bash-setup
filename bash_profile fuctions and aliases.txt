###################################################################################################################
# These are designed for use in an osx environment (may or may not work on other systems)
###################################################################################################################

alias mysql=/usr/local/mysql/bin/mysql            #mysql path
alias mysqladmin=/usr/local/mysql/bin/mysqladmin  #mysqladmin path
alias 'files'='find . -type f | wc -l'            #counts the number of files in directory
alias 'quitdock'='killall -KILL Dock'             #kills osx dock
alias cleardnscache='sudo killall -HUP mDNSResponder'
alias nospotlight='sudo mdutil -a -i off'
alias 'downloadhistory'='sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'select LSQuarantineDataURLString from LSQuarantineEvent'
###################################################################################################################

alias 'sha256'='shasum -a 256'                    #generate a sha256 hash
alias ll='ls -alh'
alias la='ls -A'

###################################################################################################################

alias 'ps'='ps -ef'                               #show all
export PATH=$PATH:.                               #look for executables in the working directory

###################################################################################################################

mkdircd () { mkdir -p "$@" && eval cd "\"\$$#\""; }
downloadhistory() {
    sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'select LSQuarantineDataURLString from LSQuarantineEvent'
    while [[ $# -ge 1 ]]; do
        key="$1"
        case $key in
            -h|--help)
                MSG="This shows the osx download history\nUsage: $0 --clear"
                shift
                ;;
            -c|-rm|--clear|--remove)
                sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'delete from LSQuarantineEvent'
                shift
                ;;
            *)
            ;;
        esac
        shift
    done
}
rmdownloadhistory() {
    sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'select LSQuarantineDataURLString from LSQuarantineEvent'
}
getmac() { #gets current MAC address of a network connection
    ifconfig $1 | grep '..:..:..:..:..:..$'
}

genmac() { #generate a MAC adress
    openssl rand -hex 1 | tr '[:lower:]' '[:upper:]' | xargs echo "obase=2;ibase=16;" | bc | cut -c1-6 | sed 's/$/00/' | xargs echo "obase=16;ibase=2;" | bc | sed "s/$/:$(openssl rand -hex 5 | sed 's/\(..\)/\1:/g; s/.$//' | tr '[:lower:]' '[:upper:]')/" 
}

setmac() { #set a MAC adress to a network connection
    if [[ $# -eq 2 ]]; then
        sudo ifconfig $1 ether $2
    fi
    if [[ $# -eq 1 ]]; then
        genmac | xargs sudo ifconfig $1 ether
    fi
}

proxytunnel() {
    DYNAMIC="8080"
    PORT="22"
    MSG=""
    
    
    while [[ $# -ge 1 ]]; do
        key="$1"
        case $key in
            -h|--help)
                MSG="This command creates a ssh tunnel\nUsage: $0 -a [username@serveraddress.com] -d [tunnelport] -p [ssh port] -u [username] -b"
                shift
                ;;
            -b|--background)
                BACKGROUND="-f"
                shift
                ;;
            -a|--address)
                ADDRESS=$2
                shift
                ;;
            -p|--port)
                PORT=$2
                shift
                ;;
            -d|--dynamic)
                DYNAMIC=$2
                shift
                ;;
            -u|--username)
                USERNAME=$2'@'
                shift
                ;;
            *)
            ;;
        esac
        shift
    done
        if [[ -z "$MSG" ]]; then
            ssh -D $DYNAMIC $Background -C -N $USERNAME$ADDRESS $BACKGROUND -p $PORT 
        else
            echo -e $MSG
        fi
}

###################################################################################################################
# Found the following at http://serverfault.com/questions/3743/what-useful-things-can-one-add-to-ones-bashrc
extract () { 
   if [ -f $1 ] ; then
       case $1 in
           *.tar.bz2)   tar xvjf $1    ;;
           *.tar.gz)    tar xvzf $1    ;;
           *.bz2)       bunzip2 $1     ;;
           *.rar)       unrar x $1       ;;
           *.gz)        gunzip $1      ;;
           *.tar)       tar xvf $1     ;;
           *.tbz2)      tar xvjf $1    ;;
           *.tgz)       tar xvzf $1    ;;
           *.zip)       unzip $1       ;;
           *.Z)         uncompress $1  ;;
           *.7z)        7z x $1        ;;
           *)           echo "don't know how to extract '$1'..." ;;
       esac
   else
       echo "'$1' is not a valid file!"
   fi
 }
 
 up(){
  local d=""
  limit=$1
  for ((i=1 ; i <= limit ; i++))
    do
      d=$d/..
    done
  d=$(echo $d | sed 's/^\///')
  if [ -z "$d" ]; then
    d=..
  fi
  cd $d
}

s() { # do sudo, or sudo the last command if no argument given
    if [[ $# == 0 ]]; then
    	sudo $(history -p '!!')
    else
    	sudo "$@"
    fi
}
